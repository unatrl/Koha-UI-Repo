.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Patron::MessagePreference 3pm"
.TH Koha::Patron::MessagePreference 3pm "2024-08-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Patron::MessagePreference \- Koha Patron Message Preference object class
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fInew\fR
.IX Subsection "new"
.PP
my \f(CW$preference\fR = Koha::Patron::MessagePreference\->new({
   borrowernumber => 123,
   #categorycode => '\s-1ABC\s0',
   message_attribute_id => 4,
   message_transport_types => ['email', 'sms'], # see documentation below
   wants_digest => 1,
   days_in_advance => 7,
});
.PP
Takes either borrowernumber or categorycode, but not both.
.PP
days_in_advance may not be available. See message_attributes table for takes_days
configuration.
.PP
wants_digest may not be available. See message_transports table for is_digest
configuration.
.PP
You can instantiate a new object without custom validation errors, but when
storing, validation may throw exceptions. See \f(CW\*(C`validate()\*(C'\fR for more
documentation.
.PP
\&\f(CW\*(C`message_transport_types\*(C'\fR is a parameter that is not actually a column in this
Koha-object. Given this parameter, the message transport types will be added as
related transport types for this object. For get and set, you can access them via
subroutine \f(CW\*(C`message_transport_types()\*(C'\fR in this class.
.PP
\fInew_from_default\fR
.IX Subsection "new_from_default"
.PP
my \f(CW$preference\fR = Koha::Patron::MessagePreference\->new_from_default({
    borrowernumber => 123,
    categorycode   => '\s-1ABC\s0',   # if not given, patron's categorycode will be used
    message_attribute_id => 1,
});
.PP
\&\s-1NOTE:\s0 This subroutine initializes and \s-1STORES\s0 the object (in order to set
message transport types for the preference), so no need to call \->store when
preferences are initialized via this method.
.PP
Stores default messaging preference for \f(CW\*(C`categorycode\*(C'\fR to patron for given
\&\f(CW\*(C`message_attribute_id\*(C'\fR.
.PP
Throws Koha::Exceptions::MissingParameter if any of following is missing:
\&\- borrowernumber
\&\- message_attribute_id
.PP
Throws Koha::Exceptions::ObjectNotFound if default preferences are not found.
.PP
\fImessage_name\fR
.IX Subsection "message_name"
.PP
\&\f(CW$preference\fR\->message_name
.PP
Gets message_name for this messaging preference.
.PP
Setter not implemented.
.PP
\fImessage_transport_types\fR
.IX Subsection "message_transport_types"
.PP
\&\f(CW$preference\fR\->message_transport_types
Returns a \s-1HASHREF\s0 of message transport types for this messaging preference, e.g.
if ($preference\->message_transport_types\->{'email'}) {
    # email is one of the transport preferences
}
.PP
\&\f(CW$preference\fR\->message_transport_types('email', 'sms');
Sets the given message transport types for this messaging preference
.PP
\fImtt_deliverable\fR
.IX Subsection "mtt_deliverable"
.PP
\&\f(CW$preference\fR\->mtt_deliverable('sms'[, \f(CW$borrowernumer\fR]);
.PP
Returns true if given message transport type can be used to deliver message to
patron.
.PP
By default, uses the borrowernumber bound to \f(CW$preference\fR, but this may be
overridden by providing optional \f(CW$borrowernumber\fR parameter.
.PP
\fIset\fR
.IX Subsection "set"
.PP
\&\f(CW$preference\fR\->set({
    message_transport_types => ['sms', 'phone'],
    wants_digest => 0,
})\->store;
.PP
Sets preference object values and additionally message_transport_types if given.
.PP
\fIstore\fR
.IX Subsection "store"
.PP
Makes a validation before actual Koha::Object\->store so that proper exceptions
can be thrown. See \f(CW\*(C`validate()\*(C'\fR for documentation about exceptions.
.PP
\fIvalidate\fR
.IX Subsection "validate"
.PP
Makes a basic validation for object.
.PP
Returns Koha::Patron::MessagePreference object, or throws and exception.
.PP
\fItype\fR
.IX Subsection "type"
.SH "AUTHOR"
.IX Header "AUTHOR"
Lari Taskula <lari.taskula@hypernova.fi>
