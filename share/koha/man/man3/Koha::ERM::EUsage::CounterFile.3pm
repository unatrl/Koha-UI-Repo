.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::ERM::EUsage::CounterFile 3pm"
.TH Koha::ERM::EUsage::CounterFile 3pm "2024-08-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::ERM::EUsage::CounterFile \- Koha ErmCounterFile Object class
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fIcounter_logs\fR
.IX Subsection "counter_logs"
.PP
Return the counter_logs for this counter_file
.PP
\fIstore\fR
.IX Subsection "store"
.PP
.Vb 1
\&    Koha::ERM::EUsage::CounterFile\->new($counter_file)\->store( $self\->{job_callbacks} );
.Ve
.PP
Stores the csv \s-1COUNTER\s0 file.
Adds usage titles from the file.
Adds the respective counter_log entry.
.IP "background_job_callbacks" 4
.IX Item "background_job_callbacks"
Receive background_job_callbacks to be able to update job progress
.PP
\fIget_usage_data_provider\fR
.IX Subsection "get_usage_data_provider"
.PP
Getter for the usage data provider of this counter_file
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_add_usage_objects\fR
.IX Subsection "_add_usage_objects"
.PP
Goes through \s-1COUNTER\s0 file and adds usage objects for each row
A usage object may be a erm_usage_title, erm_usage_platform, erm_usage_item or erm_usage_database
.PP
#FIXME?: \*(L"Yearly\*(R" usage may be incorrect, it'll only add up the months in the current report, not necessarily the whole year
.PP
\fI_add_monthly_usage_entries\fR
.IX Subsection "_add_monthly_usage_entries"
.PP
Adds erm_usage_mus database entries
.PP
\fI_add_yearly_usage_entries\fR
.IX Subsection "_add_yearly_usage_entries"
.PP
Adds erm_usage_yus database entries
.PP
\fIvalidate\fR
.IX Subsection "validate"
.PP
Verifies if the given file_content is a valid \s-1COUNTER\s0 file or not
.PP
A I <Koha::Exceptions::ERM::EUsage::CounterFile> exception is thrown
    if the file is invalid .
.PP
\fI_set_report_type_from_file\fR
.IX Subsection "_set_report_type_from_file"
.PP
Extracts Report_ID from file and sets report_type for this counter_file
.PP
\fI_get_rows_from_COUNTER_file\fR
.IX Subsection "_get_rows_from_COUNTER_file"
.PP
Returns array of rows from \s-1COUNTER\s0 file
.PP
\fI_add_job_message\fR
.IX Subsection "_add_job_message"
.PP
Add a message to be displayed in the background job
.PP
\fI_get_usage_object_id_hash\fR
.IX Subsection "_get_usage_object_id_hash"
.PP
Return a usage_object id hash to be used when adding new yus/mus
.PP
\fI_search_for_usage_object\fR
.IX Subsection "_search_for_usage_object"
.PP
Returns usage object if found
.PP
\fI_is_same_usage_object\fR
.IX Subsection "_is_same_usage_object"
.PP
Returns true if is the same usage object
.PP
\fI_get_month_number\fR
.IX Subsection "_get_month_number"
.PP
Returns month number for a given Mmm month
.PP
\fI_add_counter_log_entry\fR
.IX Subsection "_add_counter_log_entry"
.PP
Adds a erm_counter_logs database entry
.PP
\fI_add_usage_object_entry\fR
.IX Subsection "_add_usage_object_entry"
.PP
Adds a usage object database entry
.PP
\fI_type\fR
.IX Subsection "_type"
