.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::ERM::EUsage::UsageDataProvider 3pm"
.TH Koha::ERM::EUsage::UsageDataProvider 3pm "2024-08-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::ERM::EUsage::UsageDataProvider \- Koha ErmUsageDataProvider Object class
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fIcounter_files\fR
.IX Subsection "counter_files"
.PP
Getter/setter for counter_files for this usage data provider
.PP
\fIenqueue_counter_file_processing_job\fR
.IX Subsection "enqueue_counter_file_processing_job"
.PP
Enqueues a background job to process a \s-1COUNTER\s0 file that has been uploaded
.PP
\fIenqueue_sushi_harvest_jobs\fR
.IX Subsection "enqueue_sushi_harvest_jobs"
.PP
Enqueues one harvest background job for each report type in this usage data provider
.PP
\fIharvest_sushi\fR
.IX Subsection "harvest_sushi"
.PP
.Vb 7
\&    $ud_provider\->harvest_sushi(
\&        {
\&            begin_date  => $args\->{begin_date},
\&            end_date    => $args\->{end_date},
\&            report_type => $args\->{report_type}
\&        }
\&    );
.Ve
.PP
Runs this usage data provider's \s-1SUSHI\s0 harvester
Builds the \s-1URL\s0 query and requests the \s-1COUNTER 5 SUSHI\s0 service
.PP
\&\s-1COUNTER SUSHI\s0 api spec:
https://app.swaggerhub.com/apis/COUNTER/counter\-sushi_5_0_api/5.0.2
.IP "begin_date" 4
.IX Item "begin_date"
Begin date of the \s-1SUSHI\s0 harvest
.IP "end_date" 4
.IX Item "end_date"
End date of the \s-1SUSHI\s0 harvest
.IP "report_type" 4
.IX Item "report_type"
Report type to run this harvest on
.PP
\fIset_background_job_callbacks\fR
.IX Subsection "set_background_job_callbacks"
.PP
.Vb 1
\&    $self\->set_background_job_callbacks($background_job_callbacks);
.Ve
.PP
Sets the background job callbacks
.IP "background_job_callbacks" 4
.IX Item "background_job_callbacks"
Background job callbacks
.PP
\fItest_connection\fR
.IX Subsection "test_connection"
.PP
Tests the connection of the harvester to the \s-1SUSHI\s0 service and returns any alerts of planned \s-1SUSHI\s0 outages
.PP
\fIerm_usage_titles\fR
.IX Subsection "erm_usage_titles"
.PP
Method to embed erm_usage_titles to titles for report formatting
.PP
\fIerm_usage_muses\fR
.IX Subsection "erm_usage_muses"
.PP
Method to embed erm_usage_muses to titles for report formatting
.PP
\fIerm_usage_platforms\fR
.IX Subsection "erm_usage_platforms"
.PP
Method to embed erm_usage_platforms to platforms for report formatting
.PP
\fIerm_usage_items\fR
.IX Subsection "erm_usage_items"
.PP
Method to embed erm_usage_items to items for report formatting
.PP
\fIerm_usage_databases\fR
.IX Subsection "erm_usage_databases"
.PP
Method to embed erm_usage_databases to databases for report formatting
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_build_url_query\fR
.IX Subsection "_build_url_query"
.PP
Build the \s-1URL\s0 query params for \s-1COUNTER 5 SUSHI\s0 request
.PP
\fI_validate_url\fR
.IX Subsection "_validate_url"
.PP
Checks whether the url ends in a trailing \*(L"/\*(R" and adds one if not
.PP
my \f(CW$url\fR = _validate_url($url, 'harvest')
.PP
\&\f(CW$caller\fR is either the harvest_sushi function (\*(L"harvest\*(R") or the test_connection function (\*(L"status\*(R")
.PP
\fI_check_trailing_character\fR
.IX Subsection "_check_trailing_character"
.PP
Checks whether a url string ends in a \*(L"/\*(R" before we concatenate further params to the end of the url
.PP
\fI_sushi_errors\fR
.IX Subsection "_sushi_errors"
.PP
Checks and handles possible errors in the \s-1SUSHI\s0 response
Additionally, adds background job report message(s) if that is the case
.PP
\fI_counter_file_size_too_large\fR
.IX Subsection "_counter_file_size_too_large"
.PP
Checks whether a counter file size exceeds the size allowed by the database or not
Additionally, adds a background job report message if that is the case
.PP
\fI_type\fR
.IX Subsection "_type"
