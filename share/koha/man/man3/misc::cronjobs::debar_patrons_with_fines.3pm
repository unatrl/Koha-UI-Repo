.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "misc::cronjobs::debar_patrons_with_fines 3pm"
.TH misc::cronjobs::debar_patrons_with_fines 3pm "2024-08-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
debar_patrons_with_fines.pl \- Creates a debarment for all Patrons who have outstanding fines.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    debar_patrons_with_fines.pl \-\-help
\&    debar_patrons_with_fines.pl \-m "Message for user"
\&    debar_patrons_with_fines.pl \-f "/var/lib/koha/site/debar_message.txt"
\&    debar_patrons_with_fines.pl \-m "Message for user" \-e \*(Aq2022\-12\-31\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script can be used to automatically debar patrons who have an outstanding
debt to the library.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h|\-\-help\fR" 8
.IX Item "-h|--help"
Display the help message and exit
.IP "\fB\-a|\-\-amount\fR" 8
.IX Item "-a|--amount"
Sets the minimum amount the patron owes before we debar them.
Defaults to 0, meaning anyone that owes anything will be debared.
.IP "\fB\-m|\-\-message\fR" 8
.IX Item "-m|--message"
Add the passed message in the debarment comment
.IP "\fB\-f|\-\-messagefile\fR" 8
.IX Item "-f|--messagefile"
Add the content of the passed file in the debarment comment
.IP "\fB\-e|\-\-expiration\fR" 8
.IX Item "-e|--expiration"
Expire the added debarment on the passed date
.IP "\fB\-c|\-\-confirm\fR" 8
.IX Item "-c|--confirm"
Confirm that the script should actually undertake the debarments
