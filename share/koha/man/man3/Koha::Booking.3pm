.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Booking 3pm"
.TH Koha::Booking 3pm "2024-08-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Booking \- Koha Booking object class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIbiblio\fR
.IX Subsection "biblio"
.PP
Returns the related Koha::Biblio object for this booking
.PP
\fIpatron\fR
.IX Subsection "patron"
.PP
Returns the related Koha::Patron object for this booking
.PP
\fIpickup_library\fR
.IX Subsection "pickup_library"
.PP
Returns the related Koha::Library object for this booking
.PP
\fIitem\fR
.IX Subsection "item"
.PP
Returns the related Koha::Item object for this Booking
.PP
\fIstore\fR
.IX Subsection "store"
.PP
Booking specific store method to catch booking clashes and ensure we have an item assigned
.PP
We assume that if an item is passed, it's bookability has already been checked. This is to allow
overrides in the future.
.PP
\fI_assign_item_for_booking\fR
.IX Subsection "_assign_item_for_booking"
.PP
.Vb 1
\&  $self\->_assign_item_for_booking;
.Ve
.PP
Used internally in Koha::Booking\->store to ensure we have an item assigned for the booking.
.PP
\fIget_items_that_can_fill\fR
.IX Subsection "get_items_that_can_fill"
.PP
.Vb 1
\&    my $items = $bookings\->get_items_that_can_fill();
.Ve
.PP
Return the list of items that can fulfill this booking.
.PP
Items that are not:
.PP
.Vb 5
\&  in transit
\&  lost
\&  withdrawn
\&  not for loan
\&  not already booked
.Ve
.PP
\fIto_api_mapping\fR
.IX Subsection "to_api_mapping"
.PP
This method returns the mapping for representing a Koha::Booking object
on the \s-1API.\s0
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_type\fR
.IX Subsection "_type"
.SH "AUTHORS"
.IX Header "AUTHORS"
Martin Renvoize <martin.renvoize@ptfs\-europe.com>
