.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::BackgroundJob::ImportKBARTFile 3pm"
.TH Koha::BackgroundJob::ImportKBARTFile 3pm "2024-08-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ImportKBARTFile \- Create new eHoldings titles from a KBART file
.PP
This is a subclass of Koha::BackgroundJob.
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIjob_type\fR
.IX Subsection "job_type"
.PP
Define the job type of this job.
.PP
\fIprocess\fR
.IX Subsection "process"
.PP
Process the import.
.PP
\fIenqueue\fR
.IX Subsection "enqueue"
.PP
Enqueue the new job
.PP
\fIformat_title\fR
.IX Subsection "format_title"
.PP
Formats a title to fit the names of the database fields in Koha
.PP
Kbart field \*(L"title_id\*(R" = \*(L"external_id\*(R" in Koha
Kbart field \*(L"coverage_notes\*(R" = \*(L"notes\*(R" in Koha
.PP
\fIread_file\fR
.IX Subsection "read_file"
.PP
Reads a file to provide report headers and lines to be processed
.PP
\fIcreate_title_hash_from_line_data\fR
.IX Subsection "create_title_hash_from_line_data"
.PP
Takes a line and creates a hash of the values mapped to the column headings
Only accepts fields that are in the list of permitted \s-1KBART\s0 fields, other fields are ignored
(This is identified to the user on the background job status page)
.PP
\fIcheck_for_matching_title\fR
.IX Subsection "check_for_matching_title"
.PP
Checks whether this title already exists to avoid duplicates
.PP
\fIcreate_linked_resource\fR
.IX Subsection "create_linked_resource"
.PP
Creates a resource for a newly stored title.
.PP
\fIget_first_and_last_issue_dates\fR
.IX Subsection "get_first_and_last_issue_dates"
.PP
Gets and formats a date for storing on the resource. Dates can come from files in \s-1YYYY,\s0 YYYY-MM or YYYY-MM-DD format
.PP
\fIget_valid_headers\fR
.IX Subsection "get_valid_headers"
.PP
Returns a list of permitted headers in a \s-1KBART\s0 phase \s-1II\s0 file
.PP
\fIcalculate_chunked_params_size\fR
.IX Subsection "calculate_chunked_params_size"
.PP
Calculates average line size to work out how many lines to chunk a large file into
Uses only 75% of the max_allowed_packet as an upper limit
.PP
\fIis_file_too_large\fR
.IX Subsection "is_file_too_large"
.PP
Calculates the final size of the background job object that will need storing to check if we exceed the max_allowed_packet
.PP
\fIrescue_EBSCO_files\fR
.IX Subsection "rescue_EBSCO_files"
.PP
\&\s-1EBSCO\s0 have an incorrect spelling for \*(L"preceding_publication_title_id\*(R" in all of their \s-1KBART\s0 files (preceding is spelled with a double 'e').
This means all of their \s-1KBART\s0 files fail to import using the current methodology.
There is no simple way of finding out who the vendor is before importing so all \s-1KBART\s0 files from any vendor are going to have to be checked for this spelling and corrected.
